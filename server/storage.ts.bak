import { 
  users, regions, grids, avatars, regionSizes, regionPurchases,
  type User, type InsertUser, 
  type Grid, type InsertGrid,
  type Region, type InsertRegion,
  type Avatar, type InsertAvatar,
  type Setting, type InsertSetting,
  type RegionSize, type InsertRegionSize,
  type RegionPurchase, type InsertRegionPurchase,
  type LoginCustomization, type SplashPage
} from "@shared/schema";

export interface IStorage {
  // User operations
  getUser(id: number): Promise<User | undefined>;
  getUserByUsername(username: string): Promise<User | undefined>;
  getUserByEmail(email: string): Promise<User | undefined>;
  getAllUsers(): Promise<User[]>;
  createUser(user: InsertUser): Promise<User>;
  
  // Avatar operations
  createAvatar(avatar: InsertAvatar): Promise<Avatar>;
  getAvatarsByUser(userId: number): Promise<Avatar[]>;
  getAvatar(id: number): Promise<Avatar | undefined>;
  
  // Grid operations
  getGrid(id: number): Promise<Grid | undefined>;
  getAllGrids(): Promise<Grid[]>;
  createGrid(grid: InsertGrid): Promise<Grid>;
  updateGrid(id: number, grid: Partial<Grid>): Promise<Grid | undefined>;
  deleteGrid(id: number): Promise<boolean>;
  
  // Region operations
  getRegion(id: number): Promise<Region | undefined>;
  getRegionsByGrid(gridId: number): Promise<Region[]>;
  getAllRegions(): Promise<Region[]>;
  createRegion(region: InsertRegion): Promise<Region>;
  updateRegion(id: number, region: Partial<Region>): Promise<Region | undefined>;
  deleteRegion(id: number): Promise<boolean>;
  
  // Region size operations (admin configurable region templates)
  getRegionSize(id: number): Promise<RegionSize | undefined>;
  getAllRegionSizes(): Promise<RegionSize[]>;
  createRegionSize(sizeTemplate: InsertRegionSize): Promise<RegionSize>;
  updateRegionSize(id: number, sizeTemplate: Partial<RegionSize>): Promise<RegionSize | undefined>;
  deleteRegionSize(id: number): Promise<boolean>;
  
  // Region purchase operations
  getRegionPurchase(id: number): Promise<RegionPurchase | undefined>;
  getRegionPurchasesByUser(userId: number): Promise<RegionPurchase[]>;
  getPendingRegionPurchases(): Promise<RegionPurchase[]>;
  createRegionPurchase(purchase: InsertRegionPurchase): Promise<RegionPurchase>;
  updateRegionPurchase(id: number, purchase: Partial<RegionPurchase>): Promise<RegionPurchase | undefined>;
  
  // Settings operations
  getSetting(key: string): Promise<Setting | undefined>;
  getAllSettings(): Promise<Setting[]>;
  createSetting(setting: InsertSetting): Promise<Setting>;
  updateSetting(key: string, value: string): Promise<Setting | undefined>;
  deleteSetting(key: string): Promise<boolean>;
  
  // Login customization operations
  getLoginCustomization(): Promise<LoginCustomization>;
  updateLoginCustomization(customization: LoginCustomization): Promise<LoginCustomization>;
  
  // Splash page operations
  getSplashPage(): Promise<SplashPage>;
  updateSplashPage(splashPage: SplashPage): Promise<SplashPage>;
  addSplashPageImage(imageUrl: string): Promise<SplashPage>;
  removeSplashPageImage(imageUrl: string): Promise<SplashPage>;
}

export class MemStorage implements IStorage {
  private users: Map<number, User>;
  private grids: Map<number, Grid>;
  private regions: Map<number, Region>;
  private avatars: Map<number, Avatar>;
  private settings: Map<string, Setting>;
  private regionSizes: Map<number, RegionSize>;
  private regionPurchases: Map<number, RegionPurchase>;
  
  private userCurrentId: number;
  private gridCurrentId: number;
  private regionCurrentId: number;
  private avatarCurrentId: number;
  private settingCurrentId: number;
  private regionSizeCurrentId: number;
  private regionPurchaseCurrentId: number;

  constructor() {
    this.users = new Map();
    this.grids = new Map();
    this.regions = new Map();
    this.avatars = new Map();
    this.settings = new Map();
    this.regionSizes = new Map();
    this.regionPurchases = new Map();
    
    this.userCurrentId = 1;
    this.gridCurrentId = 1;
    this.regionCurrentId = 1;
    this.avatarCurrentId = 1;
    this.settingCurrentId = 1;
    this.regionSizeCurrentId = 1;
    this.regionPurchaseCurrentId = 1;
    
    // Default login customization
    const loginCustomization = {
      id: this.settingCurrentId++,
      key: "loginCustomization",
      value: JSON.stringify({
        displayType: "text",
        textValue: "OpenSimulator Grid Manager"
      }),
      lastUpdated: new Date().toISOString()
    };
    this.settings.set(loginCustomization.key, loginCustomization);
    
    // Default splash page
    const splashPage = {
      id: this.settingCurrentId++,
      key: "splashPage",
      value: JSON.stringify({
        message: "Welcome to our OpenSimulator Grid! Explore virtual worlds and connect with others.",
        calendarUrl: "",
        slideshowImages: [
          "/splash/welcome1.jpg",
          "/splash/welcome2.jpg",
          "/splash/welcome3.jpg"
        ],
        slideshowSpeed: 5000
      }),
      lastUpdated: new Date().toISOString()
    };
    this.settings.set(splashPage.key, splashPage);
    
    // Initialize with default admin user
    const adminUser: User = {
      id: this.userCurrentId++,
      username: "admin",
      password: "admin", // Plain text for the special case of admin
      email: "admin@example.com",
      isAdmin: true,
      dateJoined: new Date().toISOString(),
      firstName: null,
      lastName: null
    };
    this.users.set(adminUser.id, adminUser);
    
    // Create a regular test user account
    const testUser: User = {
      id: this.userCurrentId++,
      username: "testuser",
      // We're using SHA-256 hashing in auth.ts, so hash the password the same way for consistency
      // This is the hash of "password123"
      password: "ef92b778bafe771e89245b89ecbc08a44a4e166c06659911881f383d4473e94f",
      email: "user@example.com",
      isAdmin: false,
      dateJoined: new Date().toISOString(),
      firstName: "Test",
      lastName: "User"
    };
    this.users.set(testUser.id, testUser);
    
    // Create an avatar for the test user
    const testAvatar: Avatar = {
      id: this.avatarCurrentId++,
      userId: testUser.id,
      avatarType: "male",
      name: "TestAvatar",
      created: new Date().toISOString()
    };
    this.avatars.set(testAvatar.id, testAvatar);
    
    // Initialize with a sample grid
    const sampleGridData = {
      name: "Sample Grid",
      nickname: "SAMPLE",
      adminEmail: "admin@example.com",
      externalAddress: "localhost",
      status: "online",
      port: 8000,
      externalPort: 8002,
      isRunning: true
    };
    const sampleGrid = {
      id: this.gridCurrentId++,
      ...sampleGridData,
      lastStarted: new Date().toISOString()
    };
    this.grids.set(sampleGrid.id, sampleGrid);
    
    // Initialize with sample regions directly
    const welcomeIsland: Region = {
      id: this.regionCurrentId++,
      gridId: sampleGrid.id,
      name: "Welcome Island",
      positionX: 1000,
      positionY: 1000,
      sizeX: 256,
      sizeY: 256,
      port: 9000,
      template: "welcome",
      status: "online",
      isRunning: true,
      ownerId: null,
      isPendingSetup: null
    };
    this.regions.set(welcomeIsland.id, welcomeIsland);
    
    const marketPlaza: Region = {
      id: this.regionCurrentId++,
      gridId: sampleGrid.id,
      name: "Market Plaza",
      positionX: 1000,
      positionY: 1256,
      sizeX: 512,
      sizeY: 512,
      port: 9001,
      template: "sandbox",
      status: "online",
      isRunning: true,
      ownerId: null,
      isPendingSetup: null
    };
    this.regions.set(marketPlaza.id, marketPlaza);
    
    const eventsCenter: Region = {
      id: this.regionCurrentId++,
      gridId: sampleGrid.id,
      name: "Events Center",
      positionX: 1512,
      positionY: 1000,
      sizeX: 256,
      sizeY: 256,
      port: 9002,
      template: "empty",
      status: "online",
      isRunning: true,
      ownerId: null,
      isPendingSetup: null
    };
    this.regions.set(eventsCenter.id, eventsCenter);
    
    const sandbox: Region = {
      id: this.regionCurrentId++,
      gridId: sampleGrid.id,
      name: "Sandbox",
      positionX: 1512,
      positionY: 1256,
      sizeX: 1024,
      sizeY: 1024,
      port: 9003,
      template: "sandbox",
      status: "restarting",
      isRunning: false,
      ownerId: null,
      isPendingSetup: null
    };
    this.regions.set(sandbox.id, sandbox);
    
    // Initialize sample region size templates
    const smallRegion: RegionSize = {
      id: this.regionSizeCurrentId++,
      name: "Small",
      description: "256 x 256 region - perfect for a small homestead",
      sizeX: 256,
      sizeY: 256,
      price: "10.00",
      isEnabled: true
    };
    this.regionSizes.set(smallRegion.id, smallRegion);
    
    const mediumRegion: RegionSize = {
      id: this.regionSizeCurrentId++,
      name: "Medium",
      description: "512 x 512 region - great for larger builds",
      sizeX: 512,
      sizeY: 512,
      price: "25.00",
      isEnabled: true
    };
    this.regionSizes.set(mediumRegion.id, mediumRegion);
    
    const largeRegion: RegionSize = {
      id: this.regionSizeCurrentId++,
      name: "Large",
      description: "1024 x 1024 region - ideal for estates and big projects",
      sizeX: 1024,
      sizeY: 1024,
      price: "45.00",
      isEnabled: true
    };
    this.regionSizes.set(largeRegion.id, largeRegion);
  }

  // User operations
  async getUser(id: number): Promise<User | undefined> {
    return this.users.get(id);
  }

  async getUserByUsername(username: string): Promise<User | undefined> {
    return Array.from(this.users.values()).find(
      (user) => user.username === username,
    );
  }
  
  async getUserByEmail(email: string): Promise<User | undefined> {
    return Array.from(this.users.values()).find(
      (user) => user.email === email,
    );
  }
  
  async getAllUsers(): Promise<User[]> {
    return Array.from(this.users.values());
  }

  async createUser(insertUser: InsertUser): Promise<User> {
    const id = this.userCurrentId++;
    const dateJoined = new Date().toISOString();
    const user: User = { 
      ...insertUser, 
      id, 
      dateJoined,
      firstName: insertUser.firstName || null,
      lastName: insertUser.lastName || null,
      isAdmin: insertUser.isAdmin || false
    };
    this.users.set(id, user);
    return user;
  }
  
  // Avatar operations
  async createAvatar(insertAvatar: InsertAvatar): Promise<Avatar> {
    const id = this.avatarCurrentId++;
    const created = new Date().toISOString();
    const avatar: Avatar = { ...insertAvatar, id, created };
    this.avatars.set(id, avatar);
    return avatar;
  }
  
  async getAvatarsByUser(userId: number): Promise<Avatar[]> {
    return Array.from(this.avatars.values()).filter(
      (avatar) => avatar.userId === userId
    );
  }
  
  async getAvatar(id: number): Promise<Avatar | undefined> {
    return this.avatars.get(id);
  }
  
  // Grid operations
  async getGrid(id: number): Promise<Grid | undefined> {
    return this.grids.get(id);
  }
  
  async getAllGrids(): Promise<Grid[]> {
    return Array.from(this.grids.values());
  }
  
  async createGrid(insertGrid: InsertGrid): Promise<Grid> {
    const id = this.gridCurrentId++;
    const now = new Date().toISOString();
    // Ensure all required fields have values
    const grid: Grid = { 
      ...insertGrid, 
      id, 
      lastStarted: now,
      status: insertGrid.status || "offline",
      port: insertGrid.port || 8000,
      externalPort: insertGrid.externalPort || 8002,
      isRunning: insertGrid.isRunning || false
    };
    this.grids.set(id, grid);
    return grid;
  }
  
  async updateGrid(id: number, updates: Partial<Grid>): Promise<Grid | undefined> {
    const grid = this.grids.get(id);
    if (!grid) return undefined;
    
    const updatedGrid = { ...grid, ...updates };
    this.grids.set(id, updatedGrid);
    return updatedGrid;
  }
  
  async deleteGrid(id: number): Promise<boolean> {
    return this.grids.delete(id);
  }
  
  // Region operations
  async getRegion(id: number): Promise<Region | undefined> {
    return this.regions.get(id);
  }
  
  async getRegionsByGrid(gridId: number): Promise<Region[]> {
    return Array.from(this.regions.values()).filter(
      (region) => region.gridId === gridId
    );
  }
  
  async getAllRegions(): Promise<Region[]> {
    return Array.from(this.regions.values());
  }
  
  async createRegion(insertRegion: InsertRegion): Promise<Region> {
    const id = this.regionCurrentId++;
    // Ensure all required fields have values
    const region: Region = { 
      ...insertRegion, 
      id,
      status: insertRegion.status || "offline",
      sizeX: insertRegion.sizeX || 256,
      sizeY: insertRegion.sizeY || 256,
      template: insertRegion.template || "empty",
      isRunning: insertRegion.isRunning || false,
      ownerId: insertRegion.ownerId || null,
      isPendingSetup: insertRegion.isPendingSetup || null
    };
    this.regions.set(id, region);
    return region;
  }
  
  async updateRegion(id: number, updates: Partial<Region>): Promise<Region | undefined> {
    const region = this.regions.get(id);
    if (!region) return undefined;
    
    const updatedRegion = { ...region, ...updates };
    this.regions.set(id, updatedRegion);
    return updatedRegion;
  }
  
  async deleteRegion(id: number): Promise<boolean> {
    return this.regions.delete(id);
  }
  
  // Settings operations
  async getSetting(key: string): Promise<Setting | undefined> {
    return this.settings.get(key);
  }
  
  async getAllSettings(): Promise<Setting[]> {
    return Array.from(this.settings.values());
  }
  
  async createSetting(insertSetting: InsertSetting): Promise<Setting> {
    const id = this.settingCurrentId++;
    const lastUpdated = new Date().toISOString();
    const setting: Setting = { ...insertSetting, id, lastUpdated };
    this.settings.set(setting.key, setting);
    return setting;
  }
  
  async updateSetting(key: string, value: string): Promise<Setting | undefined> {
    const setting = this.settings.get(key);
    if (!setting) return undefined;
    
    const lastUpdated = new Date().toISOString();
    const updatedSetting = { ...setting, value, lastUpdated };
    this.settings.set(key, updatedSetting);
    return updatedSetting;
  }
  
  async deleteSetting(key: string): Promise<boolean> {
    return this.settings.delete(key);
  }
  
  // Login customization operations
  async getLoginCustomization(): Promise<LoginCustomization> {
    const setting = await this.getSetting("loginCustomization");
    if (!setting) {
      // Default if not found
      const defaultCustomization: LoginCustomization = {
        displayType: "text",
        textValue: "OpenSimulator Grid Manager"
      };
      return defaultCustomization;
    }
    
    try {
      return JSON.parse(setting.value);
    } catch (error) {
      // Handle parsing error by returning default
      const defaultCustomization: LoginCustomization = {
        displayType: "text",
        textValue: "OpenSimulator Grid Manager"
      };
      return defaultCustomization;
    }
  }
  
  async updateLoginCustomization(customization: LoginCustomization): Promise<LoginCustomization> {
    const settingValue = JSON.stringify(customization);
    const existing = await this.getSetting("loginCustomization");
    
    if (!existing) {
      // Create new setting if it doesn't exist
      await this.createSetting({
        key: "loginCustomization",
        value: settingValue
      });
    } else {
      // Update existing setting
      await this.updateSetting("loginCustomization", settingValue);
    }
    
    return customization;
  }
  
  // Region size operations
  async getRegionSize(id: number): Promise<RegionSize | undefined> {
    return this.regionSizes.get(id);
  }
  
  async getAllRegionSizes(): Promise<RegionSize[]> {
    return Array.from(this.regionSizes.values());
  }
  
  async createRegionSize(insertSizeTemplate: InsertRegionSize): Promise<RegionSize> {
    const id = this.regionSizeCurrentId++;
    const sizeTemplate: RegionSize = {
      ...insertSizeTemplate,
      id,
      isEnabled: insertSizeTemplate.isEnabled ?? true
    };
    this.regionSizes.set(id, sizeTemplate);
    return sizeTemplate;
  }
  
  async updateRegionSize(id: number, updates: Partial<RegionSize>): Promise<RegionSize | undefined> {
    const sizeTemplate = this.regionSizes.get(id);
    if (!sizeTemplate) return undefined;
    
    const updatedTemplate = { ...sizeTemplate, ...updates };
    this.regionSizes.set(id, updatedTemplate);
    return updatedTemplate;
  }
  
  async deleteRegionSize(id: number): Promise<boolean> {
    return this.regionSizes.delete(id);
  }
  
  // Region purchase operations
  async getRegionPurchase(id: number): Promise<RegionPurchase | undefined> {
    return this.regionPurchases.get(id);
  }
  
  async getRegionPurchasesByUser(userId: number): Promise<RegionPurchase[]> {
    return Array.from(this.regionPurchases.values()).filter(
      (purchase) => purchase.userId === userId
    );
  }
  
  async getPendingRegionPurchases(): Promise<RegionPurchase[]> {
    return Array.from(this.regionPurchases.values()).filter(
      (purchase) => purchase.status === "pending"
    );
  }
  
  async createRegionPurchase(insertPurchase: InsertRegionPurchase): Promise<RegionPurchase> {
    const id = this.regionPurchaseCurrentId++;
    const purchaseDate = new Date().toISOString();
    
    const purchase: RegionPurchase = {
      ...insertPurchase,
      id,
      purchaseDate,
      status: insertPurchase.status || "pending",
      paymentMethod: insertPurchase.paymentMethod || "paypal",
      regionId: insertPurchase.regionId ?? null,
      paymentId: insertPurchase.paymentId ?? null
    };
    
    this.regionPurchases.set(id, purchase);
    return purchase;
  }
  
  async updateRegionPurchase(id: number, updates: Partial<RegionPurchase>): Promise<RegionPurchase | undefined> {
    const purchase = this.regionPurchases.get(id);
    if (!purchase) return undefined;
    
    const updatedPurchase = { ...purchase, ...updates };
    this.regionPurchases.set(id, updatedPurchase);
    return updatedPurchase;
  }

  // Splash page operations
  async getSplashPage(): Promise<SplashPage> {
    const setting = await this.getSetting("splashPage");
    if (!setting) {
      // Default if not found
      const defaultSplashPage: SplashPage = {
        message: "Welcome to our OpenSimulator Grid! Explore virtual worlds and connect with others.",
        calendarUrl: "",
        slideshowImages: [],
        slideshowSpeed: 5000
      };
      return defaultSplashPage;
    }
    
    try {
      return JSON.parse(setting.value);
    } catch (error) {
      // Handle parsing error by returning default
      const defaultSplashPage: SplashPage = {
        message: "Welcome to our OpenSimulator Grid! Explore virtual worlds and connect with others.",
        calendarUrl: "",
        slideshowImages: [],
        slideshowSpeed: 5000
      };
      return defaultSplashPage;
    }
  }
  
  async updateSplashPage(splashPage: SplashPage): Promise<SplashPage> {
    const settingValue = JSON.stringify(splashPage);
    const existing = await this.getSetting("splashPage");
    
    if (!existing) {
      // Create new setting if it doesn't exist
      await this.createSetting({
        key: "splashPage",
        value: settingValue
      });
    } else {
      // Update existing setting
      await this.updateSetting("splashPage", settingValue);
    }
    
    return splashPage;
  }
  
  async addSplashPageImage(imageUrl: string): Promise<SplashPage> {
    const splashPage = await this.getSplashPage();
    
    // Only add if not already in the array
    if (!splashPage.slideshowImages.includes(imageUrl)) {
      splashPage.slideshowImages.push(imageUrl);
      await this.updateSplashPage(splashPage);
    }
    
    return splashPage;
  }
  
  async removeSplashPageImage(imageUrl: string): Promise<SplashPage> {
    const splashPage = await this.getSplashPage();
    
    splashPage.slideshowImages = splashPage.slideshowImages.filter(url => url !== imageUrl);
    await this.updateSplashPage(splashPage);
    
    return splashPage;
  }
}

export const storage = new MemStorage();
